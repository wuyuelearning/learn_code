/**
 * Created by wuyue on 2020/9/11.
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 * ['5','3','.','.','7','.','.','.','.'],
 * ['6','.','.','1','9','5','.','.','.'],
 * ['.','9','8','.','.','.','.','6','.'],
 * ['8','.','.','.','6','.','.','.','3'],
 * ['4','.','.','8','.','3','.','.','1'],
 * ['7','.','.','.','2','.','.','.','6'],
 * ['.','6','.','.','.','.','2','8','.'],
 * ['.','.','.','4','1','9','.','.','5'],
 * ['.','.','.','.','8','.','.','7','9']
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ['8','3','.','.','7','.','.','.','.'],
 *   ['6','.','.','1','9','5','.','.','.'],
 *   ['.','9','8','.','.','.','.','6','.'],
 *   ['8','.','.','.','6','.','.','.','3'],
 *   ['4','.','.','8','.','3','.','.','1'],
 *   ['7','.','.','.','2','.','.','.','6'],
 *   ['.','6','.','.','.','.','2','8','.'],
 *   ['.','.','.','4','1','9','.','.','5'],
 *   ['.','.','.','.','8','.','.','7','9']
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * 通过 int[][] 映射 ， x-'1',对应到相应的位置（只用x相同，x-'1'就是相同的），即可判断是否出现该数字
 *  i/3 *3 +j/3
 *
 *  i/3 *3 ： 下标 0-2 ：0 ，3-5: 3 ，6-8 ：6 ：把对应board对应到 box的三列上
 *  j/3 : 将 0-8 分到 0,1,2 段上
 *
 * i/3 *3 + j/3 （0,3,6 与 0，1,2相加组成i的值）
 * 例如 board左上角的一块 ， 下标 i: 0-2 ：i/3 *3 ->0 j:0-2 :j/3 :0 所以 左上角一块的 （i,j） 都映射到box i 为0 的一列上
 *
 *  board中上的一块 下标 i: 3-5 ：i/3 *3 ->3 j:0-2 :j/3 :0 所以 左上角一块的 （i,j） 都映射到box i 为 3的一列上
 *
 *  board右下角的一块 下标 i: 6-8 ：i/3 *3 ->6 j:6-8 :j/3 :2 所以 左上角一块的 （i,j） 都映射到box i 为 8 的一列上
 *
 */
public class Num36_1 {
    public static void main(String[] args) {
        Num36_1 n = new Num36_1();
        char[][] board = {
                {'.', '.', '.', '.', '5', '.', '.', '1', '.'}
                , {'.', '4', '.', '3', '.', '.', '.', '.', '.'}
                , {'.', '.', '.', '.', '.', '3', '.', '.', '1'}
                , {'8', '.', '.', '.', '.', '.', '.', '2', '.'}
                , {'.', '.', '2', '.', '7', '.', '.', '.', '.'}
                , {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
        boolean f = n.isValidSudoku(board);
        System.out.println(f);
    }

    private boolean isValidSudoku(char[][] board) {

        boolean [][] hang = new boolean[9][9];
        boolean[][] lie = new boolean[9][9];
        boolean[][] box = new boolean[9][9];
        //  hang[i][k] 当 固定，遍历j  [i][k] 是映射到一列上了
        // lie[j][k] 因为整体是按行遍历的，当出现相同的k时，就会落在lie中，同一列上，
        // 当board 下一个i时，到相同的j（board同一列），当k出想过，则 j 出现过 ，k也出现过，则相同，[j][k]是把board一列上的信息，映射到lie的一行上了

        for (int i = 0; i < 9; i++)
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int k = board[i][j] - '1';
                    int boxIndex= i/3 *3 +j/3;  //  子数独
                    if (hang[i][k] || lie[j][k]|| box[boxIndex][k]) {
                        return false;
                    } else {
                        hang[i][k] = true;
                        lie[i][k] = true;
                        box[i][boxIndex] = true;
                    }
                }
            }
        return true;
    }
}
